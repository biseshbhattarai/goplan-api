generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


model User {
  id                    Int       @id @default(autoincrement())
  fullName              String
  email                 String    @unique
  dob                   DateTime  @db.Date
  phoneNumber           String
  employmentStatus      EmployementStatus
  password              String
  profile               Profile[]
  reminder              Reminder[]
  achievement           Achievement[]
  toUser                Share[]          @relation("toUser")
  fromUser              Share[]          @relation("fromUser")
  note                  Note[]
  goal                  Goal[]
}


model Profile {
  id                    Int        @id @default(autoincrement())
  bio                   String
  profileImage          String
  mediaHandle           String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int 
  @@index([userId])
} 

model Goal { 
  id              Int         @id @default(autoincrement())
  goalTitle       String
  goalDescription String
  createDate      DateTime    @db.Date
  startDate       DateTime    @db.Date
  toCompleteDate  DateTime    @db.Date
  toSetReminder   Boolean
  reminder        Reminder[]
  achievement     Achievement[]
  app             App[]
  share           Share[]
  user            User        @relation(fields: [userId], references:[id], onDelete:Cascade)
  userId          Int

}

model Reminder {
  id              Int          @id @default(autoincrement())
  reminderTitle   String
  createDate      DateTime     @db.Date
  remindDate      DateTime     @db.Date
  goal            Goal         @relation(fields:[goalId], references:[id], onDelete: Cascade)
  goalId          Int
  user            User         @relation(fields: [userId], references:[id], onDelete:Cascade)
  userId          Int

}

model Achievement {
  id                    Int     @id @default(autoincrement())
  achievementStatus     String?
  goal                  Goal    @relation(fields:[goalId], references:[id], onDelete:Cascade)
  goalId                Int
  user                  User    @relation(fields: [userId], references:[id], onDelete:Cascade)
  userId                Int
  share                 Share[]
}

model App {
  id                    Int      @id @default(autoincrement())
  appName               String
  appLocation           String
  appType               AppType?
  toBlockDuration       String
  actualBlockDuration   String
  startBlockTime        DateTime 
  endBlockTime          DateTime
  referenceToGoal       Goal?     @relation(fields:[goalId], references:[id], onDelete:Cascade)
  goalId                Int
}

model Share {
  id                    Int         @id @default(autoincrement())
  goal                  Goal?       @relation(fields:[goalId], references:[id], onDelete:Cascade)
  goalId                Int
  achievement           Achievement @relation(fields:[achievementId], references:[id], onDelete:Cascade)
  achievementId         Int
  toUser                User        @relation("toUser", fields:[toUserId], references:[id], onDelete:Cascade)
  toUserId              Int
  fromUser              User        @relation("fromUser", fields:[fromUserId], references:[id], onDelete:Cascade)
  fromUserId            Int

}

model Note {
  id            Int     @id @default(autoincrement())
  noteTitle     String
  noteType      NoteType?
  noteText      String
  user          User    @relation(fields: [userId], references:[id], onDelete:Cascade)
  userId        Int
}

model Badge {
  id        Int   @id @default(autoincrement())
  badgeName String
  badgeType BadgeType
  badgeLogo String?

}


enum EmployementStatus {
  STUDENT
  EMPLOYED
}

enum NoteType {
  GOAL
  IDEA
  REMINDER
  LEARNING
  IMPORTANT
  URGENT
}

enum AppType {
  SOCIAL_MEDIA
  ENTERTAINMENT
  GAME
  PRODUCTIVITY
  UTILITY
  OTHER
}

enum BadgeType {
  PRENOOB
  BEGINEER
  COMPETENT
  DEDICATED
  EXPERT
  UNBEATABLE
}
